datasource db {
  provider = "postgresql"
  url      = "postgres://default:ndqkrS5DZmL6@ep-solitary-dream-774007-pooler.us-east-1.postgres.vercel-storage.com:5432/verceldb?pgbouncer=true&connect_timeout=15"
    directUrl ="postgres://default:ndqkrS5DZmL6@ep-solitary-dream-774007.us-east-1.postgres.vercel-storage.com:5432/verceldb"
  shadowDatabaseUrl = "postgres://lrpm.sasu:fjkl0dI7ZPSR@ep-cool-salad-259467-pooler.eu-central-1.aws.neon.tech/neondb"
}

generator client {
  provider        = "prisma-client-js"
}

model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?  @db.Text
  access_token       String?  @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?  @db.Text
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  role          String?
  accounts      Account[]
  sessions      Session[]
  profile       Profile?
  videos        Videos[]
  likes         Like[]
  comments      Comment[]

  


  
   
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// model Profile has one User 
model Profile {
  id        String   @id @default(cuid())
  bio       String?
  description String?
  pays     String?
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String   @unique

}
model Test {
  id        String   @id @default(cuid())
  name      String?
  

}

model Videos {
  id        String   @id @default(cuid())
  name      String?
  url       String?
  description String?
  category  String?
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String  
  likes     Like[]
  discount String?
  map String?
  article String?
  comment Comment[]
}

model Like {
  id        String   @id @default(cuid())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String  
  video     Videos   @relation(fields: [videoId], references: [id], onDelete: Cascade)
  videoId   String  
  @@unique([userId, videoId])
}
model Comment {
  id        String   @id @default(cuid())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String  
  video     Videos   @relation(fields: [videoId], references: [id], onDelete: Cascade)
  videoId   String  
  text      String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

}

